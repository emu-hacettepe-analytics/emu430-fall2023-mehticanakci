[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the [data_criminals] project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://emu-hacettepe-analytics.github.io/emu430-fall2023-team-data_criminals/data.html.\nSummary\nIn our project you will find clues from Turkey’s prisons about convicts and their educational level. We want to explore whether education level has an effect on crime . Also we want to explore convicts educational level since 1990s.\n“All our knowledge hast its origins in our perceptions … In nature there is no effect without a cause … Experience never errs; it is only your judgments that err by promising themselves effects such as are not caused by your experiments … Science is the observation of things possible, whether present or past; prescience is the knowledge of things which may come to pass.”― Leonardo da Vinci\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Mehti\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\nR codes for Turkish movies more then 2500 reviews from https://m.imdb.com is as follows. By using these codes you can get a data frame “Movies” with 5 variable “Title, Year, Duration, Rating, Votes” and 469 observations. For 1. and 2. part of assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(stringr) \nlibrary(dplyr)\nlibrary(ggplot2)\nurl_after_2010=\"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_before_2010=\"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vec=c(url_before_2010,url_after_2010)\nTitle=c()\nYear=c() \nDuration=c()\nRating=c() \nVotes=c()\ndata_for_after_2010_html=read_html(url_vec[1])\ntitle_names &lt;- data_for_after_2010_html |&gt; html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\ntitle_rating=data_for_after_2010_html |&gt; html_nodes('.ratingGroup--imdb-rating')\ntitle_rating=html_text(title_rating)\ntitle_rating=substr(title_rating,1,3)\ntitle_rating=as.numeric(title_rating)\n\ntitle_year=data_for_after_2010_html |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\ntitle_year=html_text(title_year)\ntitle_year=as.numeric(title_year)\nYear=title_year\n\ntitle_duration=data_for_after_2010_html |&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\ntitle_duration=html_text(title_duration)\ntitle_duration=60*as.numeric(substr(title_duration,1,1))+ifelse(nchar(title_duration)&gt;2,as.integer(substring(title_duration,nchar(title_duration)-2,nchar(title_duration)-1)),0)\nDuration=title_duration\n\ntitle_votes=data_for_after_2010_html |&gt; html_nodes('.kRnqtn')\ntitle_votes=html_text(title_votes)\ntitle_votes=sub(pattern = \"Votes\", replacement = \"\", x = title_votes)\ntitle_votes=sub(pattern = \",\", replacement = \"\", x = title_votes)\ntitle_votes=as.numeric(title_votes)\n\ndata_for_before_2010_html=read_html(url_vec[2])\ntitle_names_2 &lt;- data_for_before_2010_html |&gt; html_nodes('.ipc-title__text')\ntitle_names_2 &lt;- html_text(title_names_2)\ntitle_names_2 &lt;- tail(head(title_names_2,-1),-1)\ntitle_names_2 &lt;- str_split(title_names_2, \" \", n=2)\ntitle_names_2 &lt;- unlist(lapply(title_names_2, function(x) {x[2]}))\nTitle=c(title_names,title_names_2)\n\ntitle_rating_2=data_for_before_2010_html |&gt; html_nodes('.ratingGroup--imdb-rating')\ntitle_rating_2=html_text(title_rating_2)\ntitle_rating_2=substr(title_rating_2,1,3)\ntitle_rating_2=as.numeric(title_rating_2)\nRating=c(title_rating,title_rating_2)\n\ntitle_year_2=data_for_before_2010_html |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\ntitle_year_2=html_text(title_year_2)\ntitle_year_2=as.numeric(title_year_2)\nYear=c(title_year,title_year_2)\n\ntitle_duration_2=data_for_before_2010_html |&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\ntitle_duration_2=html_text(title_duration_2)\ntitle_duration_2=60*as.numeric(substr(title_duration_2,1,1))+ifelse(nchar(title_duration_2)&gt;2,as.integer(substring(title_duration_2,nchar(title_duration_2)-2,nchar(title_duration_2)-1)),0)\nDuration=c(title_duration,title_duration_2)\n\ntitle_votes_2=data_for_before_2010_html |&gt; html_nodes('.kRnqtn')\ntitle_votes_2=html_text(title_votes_2)\ntitle_votes_2=sub(pattern = \"Votes\", replacement = \"\", x = title_votes_2)\ntitle_votes_2=sub(pattern = \",\", replacement = \"\", x = title_votes_2)\ntitle_votes_2=as.numeric(title_votes_2)\nVotes=c(title_votes,title_votes_2)\nMovies=data.frame(Title,Year,Duration,Rating,Votes)\n\nBelow you can see top and bottom 5 movies based on user ratings.\n\nMovies%&gt;%arrange(desc(Rating))%&gt;%head(5)\n\n                         Title Year Duration Rating Votes\n1               Hababam Sinifi 1975       87    9.2 42500\n2       CM101MMXI Fundamentals 2013      139    9.1 46991\n3                   Tosun Pasa 1976       90    8.9 24321\n4 Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24361\n5                Süt Kardesler 1976       80    8.8 20879\n\nMovies%&gt;%arrange(desc(Rating))%&gt;%tail(5)\n\n                             Title Year Duration Rating Votes\n466                 Cumali Ceber 2 2018      100    1.2 10227\n467                          Müjde 2022      288    1.2  9920\n468              15/07 Safak Vakti 2021       95    1.2 20605\n469 Cumali Ceber: Allah Seni Alsin 2017      100    1.0 39265\n470                           Reis 2017      108    1.0 73971\n\nMovies%&gt;%filter(Title==\"Kaybedenler Kulübü\")\n\n               Title Year Duration Rating Votes\n1 Kaybedenler Kulübü 2011      105    7.5 25116\n\nMovies%&gt;%filter(Title==\"Anadolu Kartallari\")\n\n               Title Year Duration Rating Votes\n1 Anadolu Kartallari 2011      120    6.2  5632\n\n\nActually when we look at movies at the top five, raters likes comedy and laughing. I watched some of them and even though most of them are old films they still make people laugh. These are raters evaluations and we can only rate as they do, everyone has exclusively styles.\nAt bottom part we can see political movies. Maybe raters are not interested politic or they don’t believe their content…\nTwo of my favorite movies find their position in the list but it is not important. I know some extras from one of these movies. They were good guys.\nBelow you can find Turkish movies average ratings for each year\n\nplot_for_rating=Movies %&gt;%  group_by(Year) %&gt;% summarize(average_rating_for_year=mean(Rating))  \nggplot(plot_for_rating,aes(Year,average_rating_for_year)) + geom_point()\n\n\n\n\nAs shown on plot ratings decrease over years\nBelow you can see movies number for each year\n\nplot_for_total_movies_for_years=Movies %&gt;%  group_by(Year)   \nggplot(plot_for_total_movies_for_years,aes(Year)) + geom_histogram(binwidth = 1,fill =\n\"blue\", col = \"black\")\n\n\n\np=as.factor(Movies$Year)\nMovies=cbind(Movies,p)\n\nBelow you can see box plot of ratings over years\n\nMovies %&gt;%ggplot(aes(p,Rating),)+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1))+xlab(\"Years\")\n\n\n\n\nLooking only average of ratings over years may be misleading because of number of movies each year can change. With technological development, number of movies for each year increases and it can be seen easily above. Even though rating average decrease for years, number of movies increase.\nCorrelation between votes and rating;\n\nggplot(Movies,aes(Votes,Rating))+geom_point()\n\n\n\ncor(Votes,Rating)\n\n[1] 0.1306267\n\n\nFrom plot and result of cor() function we can say there is no explicitly correlation between votes and ratings.\nCorrelation between duration and rating;\n\nggplot(Movies,aes(Duration,Rating))+geom_point()\n\n\n\ncor(Duration,Rating)\n\n[1] -0.03190838\n\n\nFrom plot and result of cor() function we can say there is no explicitly correlation between duration and ratings.\nTurkish movies in top 1000 imbd\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr) \nurl_for_turkish_in_top_1000=\"https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR\"\ndata_for_1000=read_html(url_for_turkish_in_top_1000)\nnames_for_1000 &lt;- data_for_1000 |&gt; html_nodes('.ipc-title__text')\nnames_for_1000 &lt;- html_text(names_for_1000)\nnames_for_1000 &lt;- tail(head(names_for_1000,-1),-1)\nnames_for_1000 &lt;- str_split(names_for_1000, \" \", n=2)\nnames_for_1000 &lt;- unlist(lapply(names_for_1000, function(x) {x[2]}))\n\nyear=data_for_1000 |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyear=html_text(year)\nyear=as.numeric(year)\n\nmovies_in_1000=data.frame(names_for_1000,year)\nmovies_in_1000\n\n              names_for_1000 year\n1   Yedinci Kogustaki Mucize 2019\n2                 Kis Uykusu 2014\n3      Nefes: Vatan Sagolsun 2009\n4  Ayla: The Daughter of War 2017\n5             Babam ve Oglum 2005\n6                Ahlat Agaci 2018\n7    Bir Zamanlar Anadolu'da 2011\n8                     Eskiya 1996\n9                   G.O.R.A. 2004\n10                 Vizontele 2001\n11  Her Sey Çok Güzel Olacak 1998\n\n\nAfter joined with first data frame\n\nJoined_table &lt;- merge(x=movies_in_1000, y=Movies, by.x=c(\"names_for_1000\", \"year\"), by.y=c(\"Title\", \"Year\"), all.x=TRUE)\nJoined_table%&gt;%arrange(desc(Rating))\n\n              names_for_1000 year Duration Rating Votes    p\n1  Ayla: The Daughter of War 2017      125    8.3 42972 2017\n2             Babam ve Oglum 2005      108    8.2 91008 2005\n3   Yedinci Kogustaki Mucize 2019      132    8.2 54107 2019\n4                     Eskiya 1996      128    8.1 71688 1996\n5   Her Sey Çok Güzel Olacak 1998      107    8.1 27104 1998\n6                Ahlat Agaci 2018      188    8.0 26961 2018\n7                   G.O.R.A. 2004      127    8.0 66008 2004\n8                 Kis Uykusu 2014      196    8.0 54598 2014\n9      Nefes: Vatan Sagolsun 2009      128    8.0 34986 2009\n10                 Vizontele 2001      110    8.0 38389 2001\n11   Bir Zamanlar Anadolu'da 2011      157    7.8 49320 2011\n\n\nHigh rated 11 movies in two data frame are same movies but most probably IMDB uses different parameters to determine top 1000 movies. Rating and votes may not be key element to determine top 1000 list.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2019 - ongoing."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts.\n\n\nJohnny Breen Model Migration: from Excel to R This video is about Johnny Breen’s work experience that results crashing server while he tries to convert a Excel model to R project. Excel model is a statistical model and his company needs a simulation that calculate yearly loss by 99.9% confidence interval. %99.9 means event can happen once in 1000 years and simulation have to be run 10-15 million times. After his attempt the server crashes and as a conclude for this event, his recommendations are, first ‘try to understand what excel model do and what are the functional requirement’ second ‘determine where my model starts and ends also determine the operations that are applied to initial data’ third ‘keep things simple’. https://www.rstudio.com/conference/2022/talks/model-migration-excel-to-r/\n\n\n\nDifferences between R and java 1: Declarations styles: in java when you declare a variable you need to declare its type explicitly but in R you don’t need. For example: java declares a variable as:\n\nString name = \"mehti\";\n\nR declare a variable as:\n\nname='mehti'\n\nAt first, declaration standards in java can seem detailed but in my opinion, declaring its type at the beginning can prevent confusion that can occur later\n2: Coding Styles: in java you have to finish code line with ‘;’ but R has no necessity\n\nint a=5;\n\n\na=5\n\n3:Index order: in java, index of first element of an array, list etc. is 0 but in R index of first element is 1 For instance;\n\ndouble [] array= [1.2, 9.6, 3.5] ;\nSystem.out.println(array[0]);\n1.2\narray=c(1.2,9.6,3.5)\narray[1]\n\n\n\n\n\nlibrary(dslabs)\n\ndata('na_example')\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\n\nnumber_of_na=sum(is.na(na_example))\nprint(paste('number of NAs', number_of_na))\n\n[1] \"number of NAs 145\"\n\n\n\nna_example_without_NA=ifelse(is.na(na_example),0,na_example)\nprint(na_example_without_NA)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n\n\ntot=sum (is.na(na_example_without_NA))\nprint(paste('Number of NAs',tot))\n\n[1] \"Number of NAs 0\""
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Fall 2023] EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on October 25, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "",
    "text": "Johnny Breen Model Migration: from Excel to R This video is about Johnny Breen’s work experience that results crashing server while he tries to convert a Excel model to R project. Excel model is a statistical model and his company needs a simulation that calculate yearly loss by 99.9% confidence interval. %99.9 means event can happen once in 1000 years and simulation have to be run 10-15 million times. After his attempt the server crashes and as a conclude for this event, his recommendations are, first ‘try to understand what excel model do and what are the functional requirement’ second ‘determine where my model starts and ends also determine the operations that are applied to initial data’ third ‘keep things simple’. https://www.rstudio.com/conference/2022/talks/model-migration-excel-to-r/"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "",
    "text": "Differences between R and java 1: Declarations styles: in java when you declare a variable you need to declare its type explicitly but in R you don’t need. For example: java declares a variable as:\n\nString name = \"mehti\";\n\nR declare a variable as:\n\nname='mehti'\n\nAt first, declaration standards in java can seem detailed but in my opinion, declaring its type at the beginning can prevent confusion that can occur later\n2: Coding Styles: in java you have to finish code line with ‘;’ but R has no necessity\n\nint a=5;\n\n\na=5\n\n3:Index order: in java, index of first element of an array, list etc. is 0 but in R index of first element is 1 For instance;\n\ndouble [] array= [1.2, 9.6, 3.5] ;\nSystem.out.println(array[0]);\n1.2\narray=c(1.2,9.6,3.5)\narray[1]"
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "",
    "text": "library(dslabs)\n\ndata('na_example')\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\n\nnumber_of_na=sum(is.na(na_example))\nprint(paste('number of NAs', number_of_na))\n\n[1] \"number of NAs 145\"\n\n\n\nna_example_without_NA=ifelse(is.na(na_example),0,na_example)\nprint(na_example_without_NA)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n\n\ntot=sum (is.na(na_example_without_NA))\nprint(paste('Number of NAs',tot))\n\n[1] \"Number of NAs 0\""
  }
]